#----------------------------------------------------------------------------------------------------------------------#
# authors, description, version
#----------------------------------------------------------------------------------------------------------------------#
    # Endre Er{\H o}s
    # Autogenerated ROS2 emulator using jinja2
    # V.1.0.0.
#----------------------------------------------------------------------------------------------------------------------#

import sys
import rclpy
import time
from {{ package_name }} import {{ message_type_driver_to_interfacer }}
from {{ package_name }} import {{ message_type_interfacer_to_driver }}

class {{ resource_name }}_sp_emulator():

    def __init__(self, args=None):

        rclpy.init(args=args)

        self.node = rclpy.create_node("{{ resource_name }}_sp_emulator")
        self.msg_driver_to_interfacer = {{ message_type_driver_to_interfacer }}()
        self.msg_interfacer_to_driver = {{ message_type_interfacer_to_driver }}()
        {% for item in msr_vars %}
        self.{{ item }} = 0
        {%- endfor %}
        {% for item in cmd_vars%}
        self.{{ item }} = 0
        {%- endfor %}

        self.predicates = [{% for item in predicates -%}
                           {{ item }},
                           {% endfor -%}]

        self.actions = [{% for item in actions -%}
                        {{ item }},
                        {% endfor -%}]
        
        self.effects = [{% for item in effects -%}
                        {{ item }},
                        {% endfor -%}]
                        
        self.timer_period = 0.1

        self.{{ resource_name }}_interfacer_sub = self.node.create_subscription({{ message_type_interfacer_to_driver }}, 
                                                                        "/{{ resource_name }}_interfacer_to_driver", 
                                                                        self.{{ resource_name }}_interfacer_to_driver_callback)
        self.{{ resource_name }}_interfacer_pub = self.node.create_publisher({{ message_type_driver_to_interfacer }}, 
                                                                        "/{{ resource_name }}_driver_to_interfacer")
        
        self.main_tmr = self.node.create_timer(self.timer_period, self.main_callback)

        rclpy.spin(self.node)
        self.node.destroy_node()
        rclpy.shutdown()
    

    def {{ resource_name }}_interfacer_to_driver_callback(self, data):
        {% for item in cmd_vars %}
        self.{{ item }} = data.{{ item }}
        self.msg_emulator_to_interfacer.got_{{ item }} = self.{{ item }}
        {%- endfor %}


    def main_callback(self):
        for pred in self.predicates:
            if pred:
                for effect in self.effect[index(pred)]:
                    exec(effect)
        
        {% for item in msr_vars %}
        self.msg_emulator_to_interfacer.{{ item }} = self.{{ item }}
        {%- endfor %}

        self.{{ resource_name }}_interfacer_pub.publish(self.msg_emulator_to_interfacer)


    
if __name__ == '__main__':
    {{ resource_name }}_sp_emulator()
