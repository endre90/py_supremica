#----------------------------------------------------------------------------------------------------------------------#
# authors, description, version
#----------------------------------------------------------------------------------------------------------------------#
    # Endre Er{\H o}s
    # Autogenerated ROS2 tool interfacer node using jinja2
    # V.1.0.0.
#----------------------------------------------------------------------------------------------------------------------#

import sys
import rclpy
import time
from ros_autogen_testing import tool_sp_to_interfacer
from ros_autogen_testing import tool_interfacer_to_sp
from ros_autogen_testing import tool_driver_to_interfacer
from ros_autogen_testing import tool_interfacer_to_driver

class tool_sp_interfacer():

    def __init__(self, args=None):

        rclpy.init(args=args)

        self.node = rclpy.create_node("tool_sp_interfacer")
        self.msg_sp_to_interfacer = tool_sp_to_interfacer()
        self.msg_interfacer_to_sp = tool_interfacer_to_sp()
        self.msg_driver_to_interfacer = tool_driver_to_interfacer()
        self.msg_interfacer_to_driver = tool_interfacer_to_driver()
        
        self.idle = 0
        self.running_forw = 0
        self.torque_reached = 0
        
        self.set_idle = 0
        self.set_running_forw = 0

        self.timer_period = 0.1

        self.tool_sp_sub = self.node.create_subscription(tool_sp_to_interfacer, 
                                                                        "/tool_sp_to_interfacer", 
                                                                        self.tool_sp_to_interfacer_callback)
        self.tool_sp_pub = self.node.create_publisher(tool_interfacer_to_sp, 
                                                                        "/tool_interfacer_to_sp")
        self.tool_driver_sub = self.node.create_subscription(tool_driver_to_interfacer, 
                                                                        "/tool_driver_to_interfacer", 
                                                                        self.tool_driver_to_interfacer_callback)
        self.tool_driver_pub = self.node.create_publisher(tool_interfacer_to_driver, 
                                                                        "/tool_interfacer_to_driver")

        rclpy.spin(self.node)
        self.node.destroy_node()
        rclpy.shutdown()
    
    # Just forwarding from sp to one of the lower nodes based on the launch spec
    def self.tool_sp_to_interfacer_callback(self, data):
        
        self.msg_interfacer_to_driver.set_idle = data.set_idle
        self.msg_interfacer_to_driver.set_running_forw = data.set_running_forw
        self.pub.publish(self.msg_interfacer_to_driver)

    # Just forwarding from one of the lower nodes to to based on the launch spec
    def self.tool_driver_to_interfacer_callback(self, data):
        
        self.msg_interfacer_to_sp.idle = data.idle
        self.msg_interfacer_to_sp.running_forw = data.running_forw
        self.msg_interfacer_to_sp.torque_reached = data.torque_reached
        self.pub.publish(self.msg_interfacer_to_sp)

if __name__ == '__main__':
    tool_sp_interfacer()