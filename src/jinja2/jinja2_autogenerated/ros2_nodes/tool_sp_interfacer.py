#----------------------------------------------------------------------------------------------------------------------#
# authors, description, version
#----------------------------------------------------------------------------------------------------------------------#
    # Endre Er{\H o}s
    # Autogenerated ROS2 tool interfacer node using jinja2
    # V.1.0.0.
#----------------------------------------------------------------------------------------------------------------------#

import sys
import rclpy
import time
from unification_ros2_messages.msg import Toolsptointerfacer
from unification_ros2_messages.msg import Toolinterfacertosp
from unification_ros2_messages.msg import Tooldrivertointerfacer
from unification_ros2_messages.msg import Toolinterfacertodriver

class tool_sp_interfacer():

    def __init__(self, args=None):

        rclpy.init(args=args)

        self.node = rclpy.create_node("tool_sp_interfacer")
        self.msg_sp_to_interfacer = Toolsptointerfacer()
        self.msg_interfacer_to_sp = Toolinterfacertosp()
        self.msg_driver_to_interfacer = Tooldrivertointerfacer()
        self.msg_interfacer_to_driver = Toolinterfacertodriver()
        
        self.idle = False
        self.running_forw = False
        self.running_back = False
        self.torque_reached = False
        self.untightened = False
        
        self.set_idle = False
        self.set_running_forw = False
        self.set_running_back = False

        self.tool_sp_sub = self.node.create_subscription(Toolsptointerfacer, 
                                                                        "/tool_sp_to_interfacer", 
                                                                        self.tool_sp_to_interfacer_callback)
        self.tool_sp_pub = self.node.create_publisher(Toolinterfacertosp, 
                                                                        "/tool_interfacer_to_sp")
        self.tool_driver_sub = self.node.create_subscription(Tooldrivertointerfacer, 
                                                                        "/tool_driver_to_interfacer", 
                                                                        self.tool_driver_to_interfacer_callback)
        self.tool_driver_pub = self.node.create_publisher(Toolinterfacertodriver, 
                                                                        "/tool_interfacer_to_driver")

        rclpy.spin(self.node)
        self.node.destroy_node()
        rclpy.shutdown()
    
    # Just forwarding from sp to one of the lower nodes based on the launch spec
    def tool_sp_to_interfacer_callback(self, data):
        
        self.set_idle = data.set_idle
        self.msg_interfacer_to_driver.set_idle = self.set_idle
        self.set_running_forw = data.set_running_forw
        self.msg_interfacer_to_driver.set_running_forw = self.set_running_forw
        self.set_running_back = data.set_running_back
        self.msg_interfacer_to_driver.set_running_back = self.set_running_back
        self.tool_driver_pub.publish(self.msg_interfacer_to_driver)

    # Just forwarding from one of the lower nodes to to based on the launch spec
    def tool_driver_to_interfacer_callback(self, data):
        
        self.idle = data.idle
        self.msg_interfacer_to_sp.idle = self.idle
        self.running_forw = data.running_forw
        self.msg_interfacer_to_sp.running_forw = self.running_forw
        self.running_back = data.running_back
        self.msg_interfacer_to_sp.running_back = self.running_back
        self.torque_reached = data.torque_reached
        self.msg_interfacer_to_sp.torque_reached = self.torque_reached
        self.untightened = data.untightened
        self.msg_interfacer_to_sp.untightened = self.untightened
        
        self.msg_interfacer_to_sp.got_set_idle = self.set_idle
        self.msg_interfacer_to_sp.got_set_running_forw = self.set_running_forw
        self.msg_interfacer_to_sp.got_set_running_back = self.set_running_back

        self.tool_sp_pub.publish(self.msg_interfacer_to_sp)

if __name__ == '__main__':
    tool_sp_interfacer()