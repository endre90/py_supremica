#----------------------------------------------------------------------------------------------------------------------#
# authors, description, version
#----------------------------------------------------------------------------------------------------------------------#
    # Endre Er{\H o}s
    # Autogenerated ROS2 emulator using jinja2
    # V.1.0.0.
#----------------------------------------------------------------------------------------------------------------------#

import sys
import rclpy
import time
from unification_ros2_messages.msg import Tooldrivertointerfacer
from unification_ros2_messages.msg import Toolinterfacertodriver

class tool_sp_emulator():

    def __init__(self, args=None):

        rclpy.init(args=args)

        self.node = rclpy.create_node("tool_sp_emulator")
        self.msg_emulator_to_interfacer = Tooldrivertointerfacer()
        self.msg_interfacer_to_emulator = Toolinterfacertodriver()
        
        self.idle = False
        self.running_forw = False
        self.torque_reached = False
        
        self.set_idle = False
        self.set_running_forw = False

        self.predicates = ['self.idle and not self.running_forw and self.set_idle and not self.set_running_forw',
                           'not self.set_idle and self.set_running_forw and not self.running_forw',
                           'not self.set_idle and self.set_running_forw and self.running_forw',
                           'not self.set_idle and self.set_running_forw and self.torque_reached',
                           'self.set_idle and not self.set_running_forw and self.running_forw',
                           ]

        self.actions = [['self.set_idle = False', 'self.set_running_forw = True'],
                        [],
                        [],
                        ['self.set_idle = True', 'self.set_running_forw = False'],
                        [],
                        ]
        
        self.effects = [[],
                        ['self.idle = False', 'self.running_forw = True', 'self.torque_reached = False'],
                        ['self.torque_reached = True'],
                        [],
                        ['self.idle = True', 'self.running_forw = False'],
                        ]

        self.timer_period = 0.5

        self.tool_interfacer_sub = self.node.create_subscription(Toolinterfacertodriver, 
                                                                        "/tool_interfacer_to_driver", 
                                                                        self.tool_interfacer_to_driver_callback)
        self.tool_interfacer_pub = self.node.create_publisher(Tooldrivertointerfacer, 
                                                                        "/tool_driver_to_interfacer")
        
        self.main_tmr = self.node.create_timer(self.timer_period, self.main_callback)

        rclpy.spin(self.node)
        self.node.destroy_node()
        rclpy.shutdown()
    

    def tool_interfacer_to_driver_callback(self, data):
        
        self.set_idle = data.set_idle
        self.msg_emulator_to_interfacer.got_set_idle = self.set_idle
        self.set_running_forw = data.set_running_forw
        self.msg_emulator_to_interfacer.got_set_running_forw = self.set_running_forw


    def main_callback(self):
        #have to evaluate all predicates first and only then execute the effects
        store_eval_indexes = []
        for pred in self.predicates:
            if eval(pred):
                store_eval_indexes.append(self.predicates.index(pred))

        for store_eval_index in store_eval_indexes:
            for effect in self.effects[store_eval_index]:
                print(effect)
                exec(effect)
        
        
        self.msg_emulator_to_interfacer.idle = self.idle
        self.msg_emulator_to_interfacer.running_forw = self.running_forw
        self.msg_emulator_to_interfacer.torque_reached = self.torque_reached

        self.tool_interfacer_pub.publish(self.msg_emulator_to_interfacer)

if __name__ == '__main__':
    tool_sp_emulator()