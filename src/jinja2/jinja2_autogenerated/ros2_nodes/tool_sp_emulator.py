#----------------------------------------------------------------------------------------------------------------------#
# authors, description, version
#----------------------------------------------------------------------------------------------------------------------#
    # Endre Er{\H o}s
    # Autogenerated ROS2 emulator using jinja2
    # V.1.0.0.
#----------------------------------------------------------------------------------------------------------------------#

import sys
import rclpy
import time
from ros_autogen_testing import tool_driver_to_interfacer
from ros_autogen_testing import tool_interfacer_to_driver

class tool_sp_emulator():

    def __init__(self, args=None):

        rclpy.init(args=args)

        self.node = rclpy.create_node("tool_sp_emulator")
        self.msg_driver_to_interfacer = tool_driver_to_interfacer()
        self.msg_interfacer_to_driver = tool_interfacer_to_driver()
        
        self.idle = 0
        self.running_forw = 0
        self.torque_reached = 0
        
        self.set_idle = 0
        self.set_running_forw = 0

        self.predicates = [self.idle and not self.running_forw and self.set_idle and not self.set_running_forw,
                           not self.set_idle and self.set_running_forw and not self.running_forw,
                           not self.set_idle and self.set_running_forw and self.running_forw,
                           not self.set_idle and self.set_running_forw and self.torque_reached,
                           self.set_idle and not self.set_running_forw and self.running_forw,
                           ]

        self.actions = [['set_idle = False', 'set_running_forw = True'],
                        [],
                        [],
                        ['set_idle = True', 'set_running_forw = False'],
                        [],
                        ]
        
        self.effects = [[],
                        ['idle = False', 'running_forw = True'],
                        ['torque_reached = True'],
                        [],
                        ['idle = True', 'running_forw = False'],
                        ]
                        
        self.timer_period = 0.1

        self.tool_interfacer_sub = self.node.create_subscription(tool_interfacer_to_driver, 
                                                                        "/tool_interfacer_to_driver", 
                                                                        self.tool_interfacer_to_driver_callback)
        self.tool_interfacer_pub = self.node.create_publisher(tool_driver_to_interfacer, 
                                                                        "/tool_driver_to_interfacer")
        
        self.main_tmr = self.node.create_timer(self.timer_period, self.main_callback)

        rclpy.spin(self.node)
        self.node.destroy_node()
        rclpy.shutdown()
    

    def tool_interfacer_to_driver_callback(self, data):
        
        self.set_idle = data.set_idle
        self.msg_emulator_to_interfacer.got_set_idle = self.set_idle
        self.set_running_forw = data.set_running_forw
        self.msg_emulator_to_interfacer.got_set_running_forw = self.set_running_forw


    def main_callback(self):
        for pred in self.predicates:
            if pred:
                for effect in self.effect[index(pred)]:
                    exec(effect)
        
        
        self.msg_emulator_to_interfacer.idle = self.idle
        self.msg_emulator_to_interfacer.running_forw = self.running_forw
        self.msg_emulator_to_interfacer.torque_reached = self.torque_reached

        self.tool_interfacer_pub.publish(self.msg_emulator_to_interfacer)


    
if __name__ == '__main__':
    tool_sp_emulator()